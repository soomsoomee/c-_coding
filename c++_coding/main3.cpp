# include <iostream>

// 변수
// 지역(스택)
// 전역, 정적, 외부(데이터)

// 메모리 영역
// 스택
// 데이터
// ROM
// 힙 영역(동적 할당)

// 동적할당: 프로그램 실행 도중 원하는 만큼 메모리 요청 가능. 힙메모리 사용. 원하는 만큼의 메모리 잡고 주소를 받아와서 원하는 자료형을 포인터로 지정해서 사용한다. 


int main()
{
	// malloc은 heap 영역에 주어진 크기 만큼의 메모리를 할당하고 시작 주소를 반환한다. 
	// malloc은 void pointer를 반환한다. 그래서 강제 캐스팅을 함. 어떻게 사용할지는 받아가는 상황에서 포인터로 지정해준다. 
	int* pInt = (int*)malloc(100);

	float* pF = (float*)malloc(4);
	(* pF) = 1.23f;

	int iInput = 0;
	scanf_s("%d", &iInput);

	int* pInt = nullptr;

	if (100 == iInput)
	{
		// 프로그램 실행 될 때, 메모리 생길 수도 있고 아닐 수도 있음. 
		// 컴파일 할 때 메모리 해제 여부를 판단할 수 없다. 
		pInt = (int*)malloc(100);
	}

	if (nullptr != pInt)
	{
		// 해당 주소의 힙메모리 해제. 안하면 메모리 누수 발생. 
		free(pInt);
	}
	// 동적할당
	// 1. 런타임 중에 대응 가능
	// 2. 사용자가 직접 메모리를 관리해야 함(해제)

	// 가변배열 
	// 배열 개수를 선언할 떄에는 변수를 사용할 수 없다. 변수의 값은 변할 수 있기 때문에 메모리 할당이 어려움. (예: a를 입력 받는 경우)
	// int arr[a] = {};

	// 객체(instance)
	// int
	// int a; -> 객체
	

	return 0;
}