# include <stdio.h>
# include "func.h"
# include "common.h"

// 변수의 종류 -> 변수는 스택 또는 데이터 영역을 사용한다. 
// 1. 지역변수 -> 스택 영역
// 2. 전역변수 -> 데이터 영역
// 3. 정적변수(static) -> 데이터 영역
// 4. 외부변수(extern) -> 데이터 영역


// 메모리 영역
// 1. 스택 영역
// 2. 데이터 영역
// 3. 읽기 전용(코드, ROM)%%%
// 4. 힙 영역

// 전역변수
int g_i = 0; // Data 영역
// Data 영역 특징
// 프로그램 시작 시 생성
// 프로그램 종료 시 해제 


// 리턴하는게 없을 때는 void라고 한다. 
int Test()
{
	int i = 0;
	++i;
	// 정적 변수가 함수 안에서 선언된 경우 data영역에 생성된다. 함수 호출 스택이 아니라 data영역에 존재.
	// 함수의 호출 및 종료에 따라서 생성, 삭제되지는 않고, 다른 함수에서 사용할 수 없음. -> 사용 예시: 
	static int iStatic = 0; // 한번 초기화 된 다음에는 이 부분 건너뛴다. 
	++g_i;
	++iStatic;
	return iStatic;
}

// 정적 변수
// 선언된 곳에서 고정된 상태로 존재 -> main2.cpp 메모리에만 있다.
// func.cpp에 같은 이름으로 정의되더라도 충돌되지 않는다. 
// 이미 include common.h에서 불러왔기 때문에 다시 정의하지 않는다. 
// static int g_iStatic = 0;

int g_iExtern = 0;

int main()
{
	g_iStatic = 100;
	g_iExtern = 500;
	// 지역변수와 전역 변수의 차이: 함수를 반복해서 호출할 때 지역변수는 없어졌다 새로 생기지만 전역변수는 사라지지 않고 누적된다.
	// 전역변수는 함수 안, 밖에서 호출할 수 있다. main함수 밖 메모리 영역에 존재하기 때문이다. -> 외부에서 건드리지 않기를 원할 때 사옹 가능. 
	Test();
	Test();
	Test();
	g_i = 0;
	int iCall = Test();
	// iCall은 외부 함수에서 건드리지 못한다. 
	printf("%d, %d\n", g_i, iCall);
	int data = Add(3, 5);

	// 포인터 변수 
	// 주소를 저장하는 변수 -> *이 붙으면 포인터를 의미한다. 
	// 자료형(해당 포인터에게 전달된 주소를 해석하는 단위)* + 변수명 
	// int 변수의 주소만 받는다. 다른 것이 들어오면 안된다. int 변수의 사이즈인 4바이트로 접근한다. 다른 자료형을 가리키게 하면 오류가 발생한다. float을 가리키게 하면 가서 int로 읽는다. 
	int i = 100;
	int* pInt = &i;
	char* pChar = nullptr;
	short* pShort = nullptr;
	// 주소로 접근
	// 주소의 단위: 바이트
	// 플랫폼에 따라 포인터의 크기가 달라진다. -> 32bit: 한 번에 4byte 단위로 처리한다.(2^32 -> 약 4GB)
	// 64bit 플랫폼에서는 한 번에 처리할 수 있는 단위가 8byte 이기 때문에 주소도 8byte이다. 
	(*pInt) = 100; // i에 100이 들어간다. 
	// pInt는 int* 변수이기 때문에, 가리키는 곳을 int로 해석한다.
	// 따라서 주소값을 1 증가하는 의미는 다음 int 위치로 접근하기 위해서 sizeof(int) 단위로 증가하게 된다. 
	pInt += 1;

	// 포인터와 배열
	// 배열의 특징
	// 1. 메모리가 연속적인 구조이다.
	// 2. 배열의 이름은 배열의 시작 주소이다.
	int iArr[10] = {};

	// int 단위로 접근 
	*(iArr + 0) = 20; // iArr[0] = 20;
 	*(iArr + 1) = 10; // iArr[1] = 10;

	

	return 0;
}