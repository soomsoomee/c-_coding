# include <stdio.h>
# include "func.h"
# include "common.h"
# include <wchar.h>
# include <assert.h>

// 변수의 종류 -> 변수는 스택 또는 데이터 영역을 사용한다. 
// 1. 지역변수 -> 스택 영역
// 2. 전역변수 -> 데이터 영역
// 3. 정적변수(static) -> 데이터 영역
// 4. 외부변수(extern) -> 데이터 영역



// 메모리 영역
// 1. 스택 영역
// 2. 데이터 영역
// 3. 읽기 전용(코드, ROM)%%%
// 4. 힙 영역


// 전역변수
int g_i = 0; // Data 영역
// Data 영역 특징
// 프로그램 시작 시 생성
// 프로그램 종료 시 해제 


// 리턴하는게 없을 때는 void라고 한다. 
int Test()
{
	int i = 0;
	++i;
	// 정적 변수가 함수 안에서 선언된 경우 data영역에 생성된다. 함수 호출 스택이 아니라 data영역에 존재.
	// 함수의 호출 및 종료에 따라서 생성, 삭제되지는 않고, 다른 함수에서 사용할 수 없음. -> 사용 예시: 
	static int iStatic = 0; // 한번 초기화 된 다음에는 이 부분 건너뛴다. 
	++g_i;
	++iStatic;
	return iStatic;
}

// 정적 변수
// 선언된 곳에서 고정된 상태로 존재 -> main2.cpp 메모리에만 있다.
// func.cpp에 같은 이름으로 정의되더라도 충돌되지 않는다. 
// 이미 include common.h에서 불러왔기 때문에 다시 정의하지 않는다. 
// static int g_iStatic = 0;

int g_iExtern = 0;

int Output(const int* pI)
{
	int i = *pI; // ��� ����ؼ� ����� ��� ���� ����� �Ұ��� 
	return 0;
}


// ���ڿ� ���� ���ϴ� �Լ� �����
unsigned int GetLength(const wchar_t* _pStr)
{
	// ���� ���� üũ �뵵
	int i = 0;
	// ���� ������� 0�� ���.
	while (0 != _pStr[i])
	{	
		// �����ʹ� ������ Ÿ�� byte ��ŭ ���Ѵ�. 
		wchar_t c = _pStr[i];
		 
		++i;
	}
	return i;
}


// �Լ� ��� �ε�
// ��� �̸�� ���� �Լ� ������ �ִ� ��� ���� ����, Ÿ�Կ� ��� �´� �Լ� �ҷ������. 

// ���ڿ� �̾� ���̴� �Լ� �����
void StrCat(wchar_t* _pDest, unsigned int _iBufferSize, const wchar_t* _pSrc)
{
	// ����ó��
	// �̾���� ��� ���ڿ��� ���̰� �� ���� ��� �Ѿ�� ���
	int iDestLen = GetLength(_pDest);
	int iSrcLen = GetLength(_pSrc);
	if (_iBufferSize < iDestLen + iSrcLen + 1) // Null ���� ����� ���
	{
		assert(nullptr);
	}

	// ���ڿ� �̾� ���̱�
	// 1. Dest ���ڿ��� ��� Ȯ��(���ڿ��� �̾� ��� ���� �ġ)
	iDestLen; //Dest ������ �� �ε���
	// 2. �ݺ������ Src ���ڿ�� Dest �� �ġ�� �����ϱ�
	// 3. Src ���ڿ��� ��� ������ �ݺ� ���
	for (int i = 0; i < iSrcLen + 1; ++i) // null ���ڱ��� ���ϵ��� 
	{
		_pDest[iDestLen + i] = _pSrc[i];
	}
}


int main()
{
	g_iStatic = 100;
	g_iExtern = 500;
	// 지역변수와 전역 변수의 차이: 함수를 반복해서 호출할 때 지역변수는 없어졌다 새로 생기지만 전역변수는 사라지지 않고 누적된다.
	// 전역변수는 함수 안, 밖에서 호출할 수 있다. main함수 밖 메모리 영역에 존재하기 때문이다.
	Test();
	Test();
	Test();
	g_i = 0;
	int iCall = Test();
	// iCall은 외부 함수에서 건드리지 못한다. 
	printf("%d, %d\n", g_i, iCall);
	int data = Add(3, 5);

	// 포인터 변수 
	// 주소를 저장하는 변수 -> *이 붙으면 포인터를 의미한다. 
	// 자료형(해당 포인터에게 전달된 주소를 해석하는 단위)* + 변수명 
	// int 변수의 주소만 받는다. 다른 것이 들어오면 안된다. int 변수의 사이즈인 4바이트로 접근한다. 다른 자료형을 가리키게 하면 오류가 발생한다. float을 가리키게 하면 가서 int로 읽는다. 
	int i = 100;
	int* pInt = &i;
	char* pChar = nullptr;
	short* pShort = nullptr;
	// 주소로 접근
	// 주소의 단위: 바이트
	// 플랫폼에 따라 포인터의 크기가 달라진다. -> 32bit: 한 번에 4byte 단위로 처리한다.(2^32 -> 약 4GB)
	// 64bit 플랫폼에서는 한 번에 처리할 수 있는 단위가 8byte 이기 때문에 주소도 8byte이다. 
	(*pInt) = 100; // i에 100이 들어간다. 
	// pInt는 int* 변수이기 때문에, 가리키는 곳을 int로 해석한다.
	// 따라서 주소값을 1 증가하는 의미는 다음 int 위치로 접근하기 위해서 sizeof(int) 단위로 증가하게 된다. 
	pInt += 1;

	// 포인터와 배열
	// 배열의 특징
	// 1. 메모리가 연속적인 구조이다.
	// 2. 배열의 이름은 배열의 시작 주소이다.
	int iArr[10] = {};

	// int 단위로 접근 
	*(iArr + 0) = 20; // iArr[0] = 20;
 	*(iArr + 1) = 10; // iArr[1] = 10;

	// const
	// l-value: ����
	// r-value: ���
	const int cint = 100;
	// ���ȭ: ���� �ٲ� �� ��� ����. ��������� ����ѰŴϱ� ��������� �ٲ� �� ��ٴ� �ǹ̴� �ƴ�. �����ͷ� �� �ٲ� �� ���.
	cint;

	// const�� ������: �����ʹ� ����Ű�� ��� �ٲٴ���, ����Ű�� ���� ��� �ٲ� �� �ִ�. �Ϲ� ������ ���ȭ�� �ٸ���. 
	int x = 0;
	int* pIntx = &x;

	*pIntx = 1; // ����Ű�� ���� ��� �ٲٱ�
	pIntx = nullptr; //����Ű�� ��� �ٲٱ�

	const int* pConstInt = &x; // �����Ͱ� ����Ű�� ���� ���ȭ��. �ٸ� ���� ����Ű���� �ٲٴ� ��� ����
	int* const pIntConst = &x; // �����Ͱ� �ٸ� ���� ����Ű���� �ٲ� �� ���. 
	// �ʱ�ȭ �� ����Ų ��� ����Ŵ. ����Ű�� ��� ����� �� ���. 
	const int* const pConstIntConst = nullptr;


	{
		int a = 0;
		const int* pInt = &a; // pointer�� ���� ����Ѱ��� a ��ü�ʹ� ����� ���.
  		// *pInt = 100
		int* p = &a; // ������ �����͸� ����ϸ� a ��� ������ �� �ִ�. 
		*p = 100;
	}

	// const pointer ����
	// ���࿡ Output�Լ� ��û ū ��� �޾Ƽ� ����Ѵٸ�, �Լ� ȣ�� �� main �Լ� �޸� ���ð� Output �Լ� �޸� ���ÿ� �ߺ������ ū �����Ͱ� ����.
	// ��� ��� �ѱ��� �ʰ�, �����͸� ���� �ּҸ� ����ϸ� �� ȿ����̴�. ��� �� ��� ��ȭ��Ű�� �ʵ��� �ϱ� ��� constant pointer�� ����Ѵ�. 
	// ��������� ��ٲ۴ٴ°��� ��������� �ٲ��� ���ϴ� ��� �ƴϴ�. �ڵ��� ����� �ǵ��� �ݿ��ϴ� ��. 
	Output(&x);

	// void pointer : �ּҿ� ���� � �ڷ������ ����� ������� ��� ������
	// 1. ���� �ڷ���� ����� ���. 
	// 2. ��� Ÿ���� ������ �ּҵ� �� ���� ����
	// 3. ����� �Ұ���. *pVoid �Ұ���. 
	// 4. �ּ� ���� �Ұ���. pVoid+1 �Ұ���
	void* pVoid = nullptr;
	{
		int a = 0;
		float f = 0.f;
		double d = 0.;
		long long ll = 0;

		pVoid = &a;
		pVoid = &f;
		pVoid = &d;
		pVoid = &ll;
	}

	// ����
	// ���ڰ� �����ٴ� ��� �˷��ֱ� ��� null ���ڸ� ����Ѵ�. (���� 0�� ����)
	char c_ = 0;
	wchar_t wc_ = 49; // ascii �ڵ�� '1'�� ������. ���� 1�� ���� 1� �ٸ���.
	short s = 49; // �׳� ����.
	// 1 byte�δ� 127���� ���ڸ� ��Ÿ�� �� ���. 7bit ��� ����. 2 byte�� �ϸ� �� ��� ���ڿ� ���ν�ų �� ���. 
	// char(1)-> ���ڿ� ��� ���� ���̷� �����Ѵ�, wchar(2)
	char c = 'a';
	wchar_t wc = L'a';

	// �����ڷ���� ����� ��� �迭 �ʱ�ȭ �����ϴ�. 
	char szChar[10] = "abcdef";
	wchar_t szWChar[10] = L"abcdef"; // ���ڿ� �� ������� �׻� 1ĭ�� �� �ʿ��ϴ�. {97, 98, 99, 100, 101, 102}�� �����ϴ�. -> ���ڿ��� �迭� ��� ��
	// ���ڿ��� ���ʿ� const Ÿ���̶� const �����ͷ� ����ؾ���. ��������� read only �޸� ����ϴ� ��� ����Ѵٰ� �� �� ���. 
	const wchar_t* pChar_ = L"abcdef"; // ���ڿ��� �ּҰ�� ��ȯ�ϱ� ������ �����Ϳ� �Ҵ� ����. ���ڿ��� ���� �ּҸ� �޾ƿ�. -> ���ڿ� ��ü�� �ּҸ� ����Ŵ. ����� �� ��� const �����ͷ� ��. 

	// �迭�� �ι� ĭ�� z�� �ִ´�.
	szWChar[1] = 'z';
	// ���ڿ��� �ι� ��� �ٲ۴ٴ� �ǹ� �ڵ忡 �����ִ� ���ڿ�� ����϶�� �ǹ�. -> read only �޸𸮱� ������ �ٲ� �� ���. 
	//pChar_[1] = 'z';

	// �ѱ�� 1byte�� ǥ���� �� �� 2byte�� ����Ѵ�. -> ��Ƽ����Ʈ �ý���� �� �Ⱦ��δ�. wchar�� ���°� �Ϲ����̴�. 
	char szTest[10] = "abc�ѱ�"; // ��, ��� ���� 2byte�� �����. 2byte���� '��'� 54620�� �����ϴµ�, 1byte ������� 8bit�� �������� (-57, -47)�� ��. 
	wchar_t szTestW[10] = L"abc�ѱ�"; // ��� ���ڰ� 2byte�� �����

	{
		wchar_t szName[10] = L"Raimond"; // ���ڿ�� �б� ��� �޸𸮿� ��� 

		// ������ ���� Ȯ���ϱ�. ���̸� Ȯ���ϱ� ��� ������ �ּҸ� ����ϴµ� ��� �ٲ��� ���ϵ��� const wchar*�� ���. 
		int iLen = wcslen(szName);

		int iLen2 = GetLength(szName);
	}

	{
		// ���ڿ� �̾� ���̱�
		wchar_t szString[100] = L"abc";

		wcscat_s(szString, 100, L"def");
		
	}

	wchar_t szString[100] = L"abc";
	StrCat(szString, 10, L"def");


	return 0;
}
